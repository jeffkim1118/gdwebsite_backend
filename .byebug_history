c
exit
decoded
c
next
c
user
c
@user
c
exit
next
ENV['SECRET_KEY']
exit
ENV["secret_key"]
ENV["SECRET_KEY"]
printenv
ENV['SECRET_KEY']
ENV[
ENV
c
exit
decoded
next
exit
next
request.headers['Authorization']
request.headers
request
exit
decoded
next
c
tryDecode
c
decoded
c
decoded
exit
tryDecode
trydecode
c
decoded
c
next
exit
tryDecode
next
user
exit
next
tryDecode
next
user
exit
user
c
next
!valid_token?
valid_token?
next
decoded
c
decoded
c
next
c
request.headers["Authorization"]
request
c
exit
JWT.decode authorization_token()
JWT.decode authorization_token
JWT.decode
JWT
valid_token?
decoded
try_decode_token
c
decoded = JWT.decode authorization_token(), secret_key, true, { algorithm: 'HS256'}
decoded
c
exit
excit
user
tryDecode
c
arguments
param
c
User.all
c
params
c
user_params
c
user_params
@user
c
user_params
params
c
@user
c
params[:password]
params[:user]
@user.password
c
@user
c
@user
c
@user
c
@user
c
username
@user
c
params['username']
params
c
@user
c
params[:user]
:user
params
c
params[:user]
params
c
@user
c
@user.save
@user
c
@user
c
@user.password
@user
c
@user.password
@user
c
@user.password_digest
@user.password
c
@user
continue
exit
index
created
@user
create
